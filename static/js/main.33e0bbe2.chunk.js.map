{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","console","log","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLocaleLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33e0bbe2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props)=>{\n    const { name, email, id } = props\n    return (\n            <div className=\"tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5\">\n                <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        );\n}\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  console.log('CardList')\n  return (\n    <div>\n      {\n        robots.map((robot, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })\n      }\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange})=>{\n    console.log('SearchBox')\n    return(\n        \n        <div className=\"pa2\">\n            <input \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\" \n            placeholder=\"search robot\"\n            onChange = {searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n\n        <div style={{overflowY:'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n\n    )\n}\nexport default Scroll;","import React, { Component } from 'react';\n\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({ hasError: true })\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>Oooops. That is not good.</h1>\n        }\n        return this.props.children\n    }\n}\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.props !== nextProps){\n            return true;\n        }\n        return false;\n    }\n    render() {\n        console.log('Header')\n        return (\n            <div>\n                <h1 className=\"f1\">RoboFriends</h1>\n              \n            </ div>\n        )\n    }\n}\n\nexport default Header","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport { connect } from 'react-redux';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  render() {\n\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n    })\n\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n\n        <div className=\"tc\">\n         <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      )\n\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\nexport const setSearchField = (text) => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\n\nconst  initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default: \n            return state;\n        }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS: \n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default: \n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n//import { create } from 'istanbul-reports';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}